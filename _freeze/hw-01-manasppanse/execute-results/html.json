{
  "hash": "ae6bcd3eb6152564ada0d458d07e34e2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python & NumPy Basics\"\nauthor:\n  - name: \"Manas P Panse\"\n    affiliation: \"College of Information Science, University of Arizona\"\nformat:\n   html:\n    code-tools: true\n    code-overflow: wrap\n    embed-resources: true\ncode-annotations: hover\nexecute:\n  warning: false\n  messae: false\n  error: false\ntoc: true\n---\n\n# 0 - Pre-Checks\n\n::: {#695e3647 .cell execution_count=1}\n``` {.python .cell-code}\n# Checking Python Version\n\n!python --version\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython 3.12.3\n```\n:::\n:::\n\n\n# 1 - Python Basics\n\n## Task 1 - Variables & Type (1 Cr.)\n\n1.  Define two variables: an integer named `age` with a value of 25 and a string named `course` with the value \"Data Mining\".\n\n2.  Print their values and types using the `print()` and the `type()` function.\n\n::: {#9568f05a .cell execution_count=2}\n``` {.python .cell-code}\n# Defining Variables\nage = 25\ncourse = \"Data Mining\"\n\n# Printing Values & Types\nprint(\"Value of 'age' Variable :\", age)\nprint(\"Type of 'age' Variable :\", type(age))\n\nprint(\"\\nValue of 'course' Variable :\", course)\nprint(\"Type of 'course' Variable :\", type(course))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue of 'age' Variable : 25\nType of 'age' Variable : <class 'int'>\n\nValue of 'course' Variable : Data Mining\nType of 'course' Variable : <class 'str'>\n```\n:::\n:::\n\n\n## Task 2 - Control Structures (2 Cr.)\n\n1.  Write a function `is_prime(num)` that takes an integer and returns True if the number is a prime number, False otherwise.\n\n2.  Make sure you include a loop and an appropriate control flow statement to check for primality.\n\n::: {#45d5792d .cell execution_count=3}\n``` {.python .cell-code}\n# Defining the Function\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Testing\nprint(is_prime(1))\nprint(is_prime(2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\n```\n:::\n:::\n\n\n## Task 3 - Data Structures (2 Cr.)\n\n1.  Create a dictionary named `student_grades` with keys as student names and values as their grades (A, B, C, D, F).\n\n2.  Write a loop to print out each student’s name and grade in the format: \"Student [Name] has grade [Grade]\".\n\n::: {#3a4c5815 .cell execution_count=4}\n``` {.python .cell-code}\n# Creating a Dictionary named student_grades\nstudent_grades = {\n    'Manas': 'A',\n    'Bob': 'B',\n    'Jack': 'C',\n    'Mark': 'D',\n    'Wade': 'F'\n}\n\n# Looping a Print statement in the given format\nfor name, grade in student_grades.items():\n    print(f\"Student {name} has grade {grade}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStudent Manas has grade A\nStudent Bob has grade B\nStudent Jack has grade C\nStudent Mark has grade D\nStudent Wade has grade F\n```\n:::\n:::\n\n\n# 2 - NumPy Introduction\n\n::: {#1bb2e090 .cell execution_count=5}\n``` {.python .cell-code}\n# Importing NumPy library\nimport numpy as np\n```\n:::\n\n\n## Task 4 - NumPy Arrays (1 Cr.)\n\n1.  Create a NumPy array `A` of shape (10,10) with values ranging from 0 to 99.\n\n2.  Calculate the determinant of matrix `A` (use `numpy.linalg.det`). Print the result.\n\n::: {#f49b011e .cell execution_count=6}\n``` {.python .cell-code}\n# Creating the NumPy array `A`\nA = [\n  [47, 25,  8, 14, 61, 30, 87, 56,  9, 92],\n  [ 7, 66, 95, 42, 34, 77, 18, 54,  0, 81],\n  [38, 73, 64, 25,  5, 90, 16, 43, 57, 28],\n  [21, 50,  3, 87, 64, 29, 79, 94, 67, 41],\n  [ 4, 22, 18, 31, 96, 45, 72, 35, 60,  7],\n  [89, 62,  1, 74, 13, 68, 88, 27, 50, 12],\n  [76, 82,  5, 49, 53, 85, 33,  4, 24, 97],\n  [31,  6, 92, 78,  9, 46, 70, 19,  2, 83],\n  [65, 93, 28, 71, 40, 56,  7, 95, 82, 19],\n  [44, 91, 13, 52, 59, 37, 48,  6, 20, 85]\n]\n\n# Calculating the Determinant\ndeterminant = np.linalg.det(A)\n\n# Printing Result\nprint(f\"Determinant of the matrix A ( Δ ) : {determinant}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeterminant of the matrix A ( Δ ) : 1.0088849280721224e+19\n```\n:::\n:::\n\n\n## Task 5 - Iterate over Elements (2 Cr.)\n\n1.  Tract and print all the elements from the third column of a given 2D NumPy array.\n\n2.  Use a for loop to iterate through each element of this column and print their square roots.\n\nGiven Code -\n\n```\nimport numpy as np\n\n# Assuming a 2D array example\narray_2D = np.random.randint(1, 100, size=(5, 5))\n\n# complete the rest of codes here...\n```\n\n::: {#58c71f5e .cell execution_count=7}\n``` {.python .cell-code}\n# Creating a 2D Array\narray_2D = np.random.randint(1, 100, size=(5, 5))\n\n# Printing the Original Array\nprint(\"Original 2D Array : \")\nprint(array_2D)\n\n# Extracting the 3rd Column\nthird_column = array_2D[:, 2]\n\n# Printing the 3rd Column\nprint(\"\\nThird Column of the Array :\")\nprint(third_column)\n\n# Iterating through each Element of the 3rd Column and Printing their Square Roots\nprint(\"\\nSquare Roots of the Third Column Elements :\")\nfor element in third_column:\n    print(np.sqrt(element))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal 2D Array : \n[[81 55 16 49 94]\n [19 60 46 77 40]\n [63 49 30 95 21]\n [81  9 57 34 74]\n [84 10 95 63 93]]\n\nThird Column of the Array :\n[16 46 30 57 95]\n\nSquare Roots of the Third Column Elements :\n4.0\n6.782329983125268\n5.477225575051661\n7.54983443527075\n9.746794344808963\n```\n:::\n:::\n\n\n## Task 6: Statistics with NumPy (2 Cr.)\n\n1.  Given a 2D NumPy array, calculate the mean, median, and variance along both rows and columns.\n\n2.  Identify the row with the maximum variance and print it out.\n\n::: {#e3f2b584 .cell execution_count=8}\n``` {.python .cell-code}\n# Saving Timg and Borrowing the original 2D array from TASK 5\nprint(\"Original 2D Array :\")\nprint(array_2D)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal 2D Array :\n[[81 55 16 49 94]\n [19 60 46 77 40]\n [63 49 30 95 21]\n [81  9 57 34 74]\n [84 10 95 63 93]]\n```\n:::\n:::\n\n\n::: {#e626cc82 .cell execution_count=9}\n``` {.python .cell-code}\n# Calculating Mean along Columns (axis = 0)\nmean_columns = np.mean(array_2D, axis=0)\nprint(\"Mean along Columns :\")\nprint(mean_columns)\n\n# Calculating Mean along Rows (axis = 1)\nmean_rows = np.mean(array_2D, axis=1)\nprint(\"\\nMean along Rows :\")\nprint(mean_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean along Columns :\n[65.6 36.6 48.8 63.6 64.4]\n\nMean along Rows :\n[59.  48.4 51.6 51.  69. ]\n```\n:::\n:::\n\n\n::: {#1bcb6cae .cell execution_count=10}\n``` {.python .cell-code}\n# Median along Columns (axis = 0)\nmedian_columns = np.median(array_2D, axis=0)\nprint(\"Median along Columns :\")\nprint(median_columns)\n\n# Median along Rows (axis = 1)\nmedian_rows = np.median(array_2D, axis=1)\nprint(\"\\nMedian along Rows :\")\nprint(median_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMedian along Columns :\n[81. 49. 46. 63. 74.]\n\nMedian along Rows :\n[55. 46. 49. 57. 84.]\n```\n:::\n:::\n\n\n::: {#5d852f63 .cell execution_count=11}\n``` {.python .cell-code}\n# Variance along columns (axis=0)\nvariance_columns = np.var(array_2D, axis=0)\nprint(\"Variance along Columns :\")\nprint(variance_columns)\n\n# Variance along rows (axis=1)\nvariance_rows = np.var(array_2D, axis=1)\nprint(\"\\nVariance along Rows :\")\nprint(variance_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVariance along Columns :\n[598.24 501.84 727.76 451.04 853.04]\n\nVariance along Rows :\n[734.8  378.64 684.64 703.6  998.8 ]\n```\n:::\n:::\n\n\n::: {#e320a29a .cell execution_count=12}\n``` {.python .cell-code}\n# Identifying the Row with the MAXIMUM Variance\nmax_variance_row_index = np.argmax(variance_rows)\nmax_variance_row = array_2D[max_variance_row_index]\n\n# Print the Row with the MAXIMUM Variance\nprint(\"Row with the MAX Variance :\")\nprint(max_variance_row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRow with the MAX Variance :\n[84 10 95 63 93]\n```\n:::\n:::\n\n\n# 3 - Declaration of Independent Work\n\nSee **HOMEPAGE** for details\n\n",
    "supporting": [
      "hw-01-manasppanse_files"
    ],
    "filters": [],
    "includes": {}
  }
}