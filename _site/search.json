[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Common Rules Across HWs",
    "section": "",
    "text": "Instructions\n\nFor any exercise where you’re writing code, write your codes in the empty code chunk. You are also allowed to add additional code chunks when needed.\nFor any exercise where you’re creating a plot, make sure to label all axes, legends, etc. and give it an informative title.\nFor any exercise where you’re including a description and/or interpretation, use full sentences.\n\n\n\nHomework Submission Demo\nThere is a 7-min homework submission demo avaliable at Content &gt; Week 2. Please watch the video if you are unsure how to complete the homework.\n\n\nPolicies\n\nSharing / Reusing Code Policy : Unless explicitly stated otherwise, this course’s policy is that you may make use of any online resources (e.g. RStudio Community, StackOverflow, etc.) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s). Any recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source.\nLate Submission Policy :\n\nLate, but next day (before noon): -10% of available points.\nLate, but next day (after noon): -20% of available points.\nTwo days late or later: No credit\n\nDeclaration of Independent Work : You must acknowledge that your submitted Assessment is your independent work, by putting your name and date at the end of the “Declaration of Independent Work” section.\n\n\n\nTotal Credits\n\n\n\nSr. No\nHomework Name\nAvailable Credits\n\n\n\n\n01\nHW-01\n10\n\n\n02\nHW-02\n10\n\n\n\n\n\nSubmission DDL\n\n\n\nSr. No\nHomework Name\nDDL\n\n\n\n\n01\nHW-01\nSep-09 12:01 AM The first minute of Week 3.\n\n\n02\nHW-02\nSep-23 12:01 AM The first minute of Week 5.\n\n\n\n\n\nDeclaration of Independent Work\nI hereby declare that this assignment is entirely my own work and that I have neither given nor received unauthorized assistance in completing it. I have adhered to all the guidelines provided for this assignment and have cited all sources from which I derived data, ideas, or words, whether quoted directly or paraphrased.\nFurthermore, I understand that providing false declaration is a violation of the University of Arizona’s honor code and will result in appropriate disciplinary action consistent with the severity of the violation.\n\n\n\nSr. No\nHomework Name\nDate\nSignature\n\n\n\n\n01\nHW-01\nSept 08th, 2024\nManas P Panse\n\n\n02\nHW-02\nSept 22th, 2024\nManas P Panse"
  },
  {
    "objectID": "hw-01-manasppanse.html",
    "href": "hw-01-manasppanse.html",
    "title": "Python & NumPy Basics",
    "section": "",
    "text": "# Checking Python Version\n\n!python --version\n\nPython 3.12.3"
  },
  {
    "objectID": "hw-01-manasppanse.html#task-1---variables-type-1-cr.",
    "href": "hw-01-manasppanse.html#task-1---variables-type-1-cr.",
    "title": "Python & NumPy Basics",
    "section": "Task 1 - Variables & Type (1 Cr.)",
    "text": "Task 1 - Variables & Type (1 Cr.)\n\nDefine two variables: an integer named age with a value of 25 and a string named course with the value “Data Mining”.\nPrint their values and types using the print() and the type() function.\n\n\n# Defining Variables\nage = 25\ncourse = \"Data Mining\"\n\n# Printing Values & Types\nprint(\"Value of 'age' Variable :\", age)\nprint(\"Type of 'age' Variable :\", type(age))\n\nprint(\"\\nValue of 'course' Variable :\", course)\nprint(\"Type of 'course' Variable :\", type(course))\n\nValue of 'age' Variable : 25\nType of 'age' Variable : &lt;class 'int'&gt;\n\nValue of 'course' Variable : Data Mining\nType of 'course' Variable : &lt;class 'str'&gt;"
  },
  {
    "objectID": "hw-01-manasppanse.html#task-2---control-structures-2-cr.",
    "href": "hw-01-manasppanse.html#task-2---control-structures-2-cr.",
    "title": "Python & NumPy Basics",
    "section": "Task 2 - Control Structures (2 Cr.)",
    "text": "Task 2 - Control Structures (2 Cr.)\n\nWrite a function is_prime(num) that takes an integer and returns True if the number is a prime number, False otherwise.\nMake sure you include a loop and an appropriate control flow statement to check for primality.\n\n\n# Defining the Function\ndef is_prime(num):\n    if num &lt;= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Testing\nprint(is_prime(1))\nprint(is_prime(2))\n\nFalse\nTrue"
  },
  {
    "objectID": "hw-01-manasppanse.html#task-3---data-structures-2-cr.",
    "href": "hw-01-manasppanse.html#task-3---data-structures-2-cr.",
    "title": "Python & NumPy Basics",
    "section": "Task 3 - Data Structures (2 Cr.)",
    "text": "Task 3 - Data Structures (2 Cr.)\n\nCreate a dictionary named student_grades with keys as student names and values as their grades (A, B, C, D, F).\nWrite a loop to print out each student’s name and grade in the format: “Student [Name] has grade [Grade]”.\n\n\n# Creating a Dictionary named student_grades\nstudent_grades = {\n    'Manas': 'A',\n    'Bob': 'B',\n    'Jack': 'C',\n    'Mark': 'D',\n    'Wade': 'F'\n}\n\n# Looping a Print statement in the given format\nfor name, grade in student_grades.items():\n    print(f\"Student {name} has grade {grade}\")\n\nStudent Manas has grade A\nStudent Bob has grade B\nStudent Jack has grade C\nStudent Mark has grade D\nStudent Wade has grade F"
  },
  {
    "objectID": "hw-01-manasppanse.html#task-4---numpy-arrays-1-cr.",
    "href": "hw-01-manasppanse.html#task-4---numpy-arrays-1-cr.",
    "title": "Python & NumPy Basics",
    "section": "Task 4 - NumPy Arrays (1 Cr.)",
    "text": "Task 4 - NumPy Arrays (1 Cr.)\n\nCreate a NumPy array A of shape (10,10) with values ranging from 0 to 99.\nCalculate the determinant of matrix A (use numpy.linalg.det). Print the result.\n\n\n# Creating the NumPy array `A`\nA = [\n  [47, 25,  8, 14, 61, 30, 87, 56,  9, 92],\n  [ 7, 66, 95, 42, 34, 77, 18, 54,  0, 81],\n  [38, 73, 64, 25,  5, 90, 16, 43, 57, 28],\n  [21, 50,  3, 87, 64, 29, 79, 94, 67, 41],\n  [ 4, 22, 18, 31, 96, 45, 72, 35, 60,  7],\n  [89, 62,  1, 74, 13, 68, 88, 27, 50, 12],\n  [76, 82,  5, 49, 53, 85, 33,  4, 24, 97],\n  [31,  6, 92, 78,  9, 46, 70, 19,  2, 83],\n  [65, 93, 28, 71, 40, 56,  7, 95, 82, 19],\n  [44, 91, 13, 52, 59, 37, 48,  6, 20, 85]\n]\n\n# Calculating the Determinant\ndeterminant = np.linalg.det(A)\n\n# Printing Result\nprint(f\"Determinant of the matrix A ( Δ ) : {determinant}\")\n\nDeterminant of the matrix A ( Δ ) : 1.0088849280721224e+19"
  },
  {
    "objectID": "hw-01-manasppanse.html#task-5---iterate-over-elements-2-cr.",
    "href": "hw-01-manasppanse.html#task-5---iterate-over-elements-2-cr.",
    "title": "Python & NumPy Basics",
    "section": "Task 5 - Iterate over Elements (2 Cr.)",
    "text": "Task 5 - Iterate over Elements (2 Cr.)\n\nTract and print all the elements from the third column of a given 2D NumPy array.\nUse a for loop to iterate through each element of this column and print their square roots.\n\nGiven Code -\nimport numpy as np\n\n# Assuming a 2D array example\narray_2D = np.random.randint(1, 100, size=(5, 5))\n\n# complete the rest of codes here...\n\n# Creating a 2D Array\narray_2D = np.random.randint(1, 100, size=(5, 5))\n\n# Printing the Original Array\nprint(\"Original 2D Array : \")\nprint(array_2D)\n\n# Extracting the 3rd Column\nthird_column = array_2D[:, 2]\n\n# Printing the 3rd Column\nprint(\"\\nThird Column of the Array :\")\nprint(third_column)\n\n# Iterating through each Element of the 3rd Column and Printing their Square Roots\nprint(\"\\nSquare Roots of the Third Column Elements :\")\nfor element in third_column:\n    print(np.sqrt(element))\n\nOriginal 2D Array : \n[[81 55 16 49 94]\n [19 60 46 77 40]\n [63 49 30 95 21]\n [81  9 57 34 74]\n [84 10 95 63 93]]\n\nThird Column of the Array :\n[16 46 30 57 95]\n\nSquare Roots of the Third Column Elements :\n4.0\n6.782329983125268\n5.477225575051661\n7.54983443527075\n9.746794344808963"
  },
  {
    "objectID": "hw-01-manasppanse.html#task-6-statistics-with-numpy-2-cr.",
    "href": "hw-01-manasppanse.html#task-6-statistics-with-numpy-2-cr.",
    "title": "Python & NumPy Basics",
    "section": "Task 6: Statistics with NumPy (2 Cr.)",
    "text": "Task 6: Statistics with NumPy (2 Cr.)\n\nGiven a 2D NumPy array, calculate the mean, median, and variance along both rows and columns.\nIdentify the row with the maximum variance and print it out.\n\n\n# Saving Timg and Borrowing the original 2D array from TASK 5\nprint(\"Original 2D Array :\")\nprint(array_2D)\n\nOriginal 2D Array :\n[[81 55 16 49 94]\n [19 60 46 77 40]\n [63 49 30 95 21]\n [81  9 57 34 74]\n [84 10 95 63 93]]\n\n\n\n# Calculating Mean along Columns (axis = 0)\nmean_columns = np.mean(array_2D, axis=0)\nprint(\"Mean along Columns :\")\nprint(mean_columns)\n\n# Calculating Mean along Rows (axis = 1)\nmean_rows = np.mean(array_2D, axis=1)\nprint(\"\\nMean along Rows :\")\nprint(mean_rows)\n\nMean along Columns :\n[65.6 36.6 48.8 63.6 64.4]\n\nMean along Rows :\n[59.  48.4 51.6 51.  69. ]\n\n\n\n# Median along Columns (axis = 0)\nmedian_columns = np.median(array_2D, axis=0)\nprint(\"Median along Columns :\")\nprint(median_columns)\n\n# Median along Rows (axis = 1)\nmedian_rows = np.median(array_2D, axis=1)\nprint(\"\\nMedian along Rows :\")\nprint(median_rows)\n\nMedian along Columns :\n[81. 49. 46. 63. 74.]\n\nMedian along Rows :\n[55. 46. 49. 57. 84.]\n\n\n\n# Variance along columns (axis=0)\nvariance_columns = np.var(array_2D, axis=0)\nprint(\"Variance along Columns :\")\nprint(variance_columns)\n\n# Variance along rows (axis=1)\nvariance_rows = np.var(array_2D, axis=1)\nprint(\"\\nVariance along Rows :\")\nprint(variance_rows)\n\nVariance along Columns :\n[598.24 501.84 727.76 451.04 853.04]\n\nVariance along Rows :\n[734.8  378.64 684.64 703.6  998.8 ]\n\n\n\n# Identifying the Row with the MAXIMUM Variance\nmax_variance_row_index = np.argmax(variance_rows)\nmax_variance_row = array_2D[max_variance_row_index]\n\n# Print the Row with the MAXIMUM Variance\nprint(\"Row with the MAX Variance :\")\nprint(max_variance_row)\n\nRow with the MAX Variance :\n[84 10 95 63 93]"
  },
  {
    "objectID": "hw-02-manasppanse.html",
    "href": "hw-02-manasppanse.html",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "",
    "text": "# Checking Python Version\n\n!python --version\n\nPython 3.12.3\n\n\n\n# Importing Necessary Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nimport scipy.stats as stats\n\n\n# Importing Dataset\n\nsongs_df = pd.read_csv(\"data/hw-02/taylor_album_songs.csv\")"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-1---data-overview-1-cr.",
    "href": "hw-02-manasppanse.html#task-1---data-overview-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 1 - Data Overview (1 Cr.)",
    "text": "Task 1 - Data Overview (1 Cr.)\n\nsongs_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 194 entries, 0 to 193\nData columns (total 29 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   album_name           194 non-null    object \n 1   ep                   194 non-null    bool   \n 2   album_release        194 non-null    object \n 3   track_number         194 non-null    int64  \n 4   track_name           194 non-null    object \n 5   artist               191 non-null    object \n 6   featuring            16 non-null     object \n 7   bonus_track          194 non-null    bool   \n 8   promotional_release  18 non-null     object \n 9   single_release       36 non-null     object \n 10  track_release        194 non-null    object \n 11  danceability         191 non-null    float64\n 12  energy               191 non-null    float64\n 13  key                  191 non-null    float64\n 14  loudness             191 non-null    float64\n 15  mode                 191 non-null    float64\n 16  speechiness          191 non-null    float64\n 17  acousticness         191 non-null    float64\n 18  instrumentalness     191 non-null    float64\n 19  liveness             191 non-null    float64\n 20  valence              191 non-null    float64\n 21  tempo                191 non-null    float64\n 22  time_signature       191 non-null    float64\n 23  duration_ms          191 non-null    float64\n 24  explicit             191 non-null    object \n 25  key_name             191 non-null    object \n 26  mode_name            191 non-null    object \n 27  key_mode             191 non-null    object \n 28  lyrics               0 non-null      float64\ndtypes: bool(2), float64(14), int64(1), object(12)\nmemory usage: 41.4+ KB\n\n\n\nShape\nThe dataset contains 194 ROWS and 29 COLUMNS.\n\n\nColumns\n\nCategorical Columns : album_name, ep, album_release, track_name, artist, featuring, bonus_track, promotional_release, single_release, track_release, explicit, key_name, mode_name, key_mode.\nNumerical Columns : track_number, danceability, energy, key, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, tempo, time_signature, duration_ms, lyrics.\n\n\n\nDataTypes\n\nobject : 12 columns.\nbool : 02 columns.\nint64 : 01 column.\nfloat64 : 14 columns.\n\n\n\nDescriptive Statistics\n\nsongs_df.describe()\n\n\n\n\n\n\n\n\n\ntrack_number\ndanceability\nenergy\nkey\nloudness\nmode\nspeechiness\nacousticness\ninstrumentalness\nliveness\nvalence\ntempo\ntime_signature\nduration_ms\nlyrics\n\n\n\n\ncount\n194.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n191.000000\n0.0\n\n\nmean\n10.706186\n0.584016\n0.574492\n4.685864\n-7.518058\n0.910995\n0.058310\n0.321225\n0.003936\n0.140813\n0.400857\n125.991424\n3.979058\n237078.942408\nNaN\n\n\nstd\n6.599675\n0.115372\n0.183443\n3.342826\n2.775821\n0.285500\n0.056866\n0.329021\n0.030607\n0.079951\n0.190456\n31.959403\n0.289430\n47316.125333\nNaN\n\n\nmin\n1.000000\n0.292000\n0.131000\n0.000000\n-15.434000\n0.000000\n0.023100\n0.000191\n0.000000\n0.035700\n0.038200\n68.534000\n1.000000\n148781.000000\nNaN\n\n\n25%\n5.000000\n0.511000\n0.446500\n2.000000\n-9.326000\n1.000000\n0.030800\n0.034600\n0.000000\n0.092950\n0.253500\n99.978000\n4.000000\n209326.500000\nNaN\n\n\n50%\n10.000000\n0.594000\n0.580000\n5.000000\n-6.937000\n1.000000\n0.039600\n0.162000\n0.000001\n0.115000\n0.404000\n121.956000\n4.000000\n232107.000000\nNaN\n\n\n75%\n15.000000\n0.652000\n0.717000\n7.000000\n-5.606000\n1.000000\n0.057400\n0.662000\n0.000040\n0.150500\n0.534500\n150.027500\n4.000000\n254447.500000\nNaN\n\n\nmax\n30.000000\n0.897000\n0.950000\n11.000000\n-2.098000\n1.000000\n0.519000\n0.971000\n0.348000\n0.594000\n0.942000\n208.918000\n5.000000\n613027.000000\nNaN"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-2---univariate-analysis-1-cr.",
    "href": "hw-02-manasppanse.html#task-2---univariate-analysis-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 2 - Univariate Analysis (1 Cr.)",
    "text": "Task 2 - Univariate Analysis (1 Cr.)\n\n# Numerical Columns\nnumeric_cols = songs_df.select_dtypes(include=['float64', 'int64']).columns\n\n# Categorical Columns\ncategoric_cols = songs_df.select_dtypes(include=['object', 'bool']).columns\n\n\nNumeric Columns Plot\n\nplt.figure(figsize = (15, 12))\nfor i, column in enumerate(numeric_cols, 1):\n  plt.subplot(4, 4, i)\n  sns.histplot(songs_df[column], kde = True)\n  plt.title(f'Histogram of {column}')\n  plt.xlabel(column)\n  plt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCategoric Columns Plot\n\nplt.figure(figsize = (15, 12))\nfor i, column in enumerate(categoric_cols, 1):\n  plt.subplot(4, 4, i)\n  sns.histplot(songs_df[column], kde = True)\n  plt.title(f'Histogram of {column}')\n  plt.xlabel(column)\n  plt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-3---bivariate-analysis-1-cr.",
    "href": "hw-02-manasppanse.html#task-3---bivariate-analysis-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 3 - Bivariate Analysis (1 Cr.)",
    "text": "Task 3 - Bivariate Analysis (1 Cr.)\n\nDanceability vs Energy\n\nplt.figure(figsize = (8, 6))\nsns.scatterplot(x = \"danceability\", y = \"energy\", data = songs_df, hue = \"album_name\")\nplt.title(\"Danceability vs Energy\", pad = 50)\nplt.legend(title = \"Album\", loc = 'upper center', bbox_to_anchor = (0.5, 1.15), fontsize = \"small\", ncol = 5)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nLoudness vs Acousticness\n\nplt.figure(figsize = (8, 6))\nsns.scatterplot(x = \"loudness\", y = \"acousticness\", data = songs_df, hue = \"album_name\")\nplt.title(\"Loudness vs Acousticness\", pad = 50)\nplt.legend(title = \"Album\", loc = 'upper center', bbox_to_anchor = (0.5, 1.15), fontsize = \"small\", ncol = 5)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nValence vs Tempo\n\nplt.figure(figsize = (8, 6))\nsns.scatterplot(x = \"valence\", y = \"tempo\", data = songs_df, hue = \"album_name\")\nplt.title(\"Valence vs Tempo\", pad = 50)\nplt.legend(title = \"Album\", loc = 'upper center', bbox_to_anchor = (0.5, 1.15), fontsize = \"small\", ncol = 5)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-4---missing-data-outliers-1-cr.",
    "href": "hw-02-manasppanse.html#task-4---missing-data-outliers-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 4 - Missing Data & Outliers (1 Cr.)",
    "text": "Task 4 - Missing Data & Outliers (1 Cr.)\n\nNull Values\n\nsongs_df.isnull().sum()\n\nalbum_name               0\nep                       0\nalbum_release            0\ntrack_number             0\ntrack_name               0\nartist                   3\nfeaturing              178\nbonus_track              0\npromotional_release    176\nsingle_release         158\ntrack_release            0\ndanceability             3\nenergy                   3\nkey                      3\nloudness                 3\nmode                     3\nspeechiness              3\nacousticness             3\ninstrumentalness         3\nliveness                 3\nvalence                  3\ntempo                    3\ntime_signature           3\nduration_ms              3\nexplicit                 3\nkey_name                 3\nmode_name                3\nkey_mode                 3\nlyrics                 194\ndtype: int64\n\n\nColumns with NULLs : artist, featuring, promotional_release, single_release, danceability, energy, key, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, tempo, time_signature, duration_ms, lyrics.\n\n\nOutlier Detection\n\ndef find_outliers(df, column):\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    return df[(df[column] &lt; lower_bound) | (df[column] &gt; upper_bound)]\n\noutliers_count = {col: len(find_outliers(songs_df, col)) for col in numeric_cols}\nprint(\"Total Outliers for each Numerical Column :\\n\", outliers_count)\n\nTotal Outliers for each Numerical Column :\n {'track_number': 0, 'danceability': 3, 'energy': 0, 'key': 0, 'loudness': 2, 'mode': 17, 'speechiness': 20, 'acousticness': 0, 'instrumentalness': 40, 'liveness': 21, 'valence': 0, 'tempo': 0, 'time_signature': 8, 'duration_ms': 5, 'lyrics': 0}"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-5---handling-missing-values-1-cr.",
    "href": "hw-02-manasppanse.html#task-5---handling-missing-values-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 5 - Handling Missing Values (1 Cr.)",
    "text": "Task 5 - Handling Missing Values (1 Cr.)\n\nfor col in numeric_cols:\n    songs_df[col].fillna(songs_df[col].median(), inplace = True)\n\n\nfor col in categoric_cols:\n    songs_df[col].fillna(songs_df[col].mode().iloc[0], inplace = True)\n\n\nsongs_df.isnull().sum()\n\nalbum_name               0\nep                       0\nalbum_release            0\ntrack_number             0\ntrack_name               0\nartist                   0\nfeaturing                0\nbonus_track              0\npromotional_release      0\nsingle_release           0\ntrack_release            0\ndanceability             0\nenergy                   0\nkey                      0\nloudness                 0\nmode                     0\nspeechiness              0\nacousticness             0\ninstrumentalness         0\nliveness                 0\nvalence                  0\ntempo                    0\ntime_signature           0\nduration_ms              0\nexplicit                 0\nkey_name                 0\nmode_name                0\nkey_mode                 0\nlyrics                 194\ndtype: int64"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-6---dealing-with-outliers-1-cr.",
    "href": "hw-02-manasppanse.html#task-6---dealing-with-outliers-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 6 - Dealing with Outliers (1 Cr.)",
    "text": "Task 6 - Dealing with Outliers (1 Cr.)\n\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['danceability'], shade = True)\nplt.title('Density Plot of Danceability Before Capping')\nplt.show()\n\n\n\n\n\n\n\n\n\ntask6_lb = songs_df['danceability'].quantile(0.10) # Cutoff at 10th\ntask6_ub = songs_df['danceability'].quantile(0.90) # Cutoff at 90th\n\nsongs_df['danceability'] = songs_df['danceability'].clip(lower = task6_lb, upper = task6_ub)\n\n# Visualizing the Effect of Capping\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['danceability'], shade = True)\nplt.title('Density Plot of Danceability After Capping')\nplt.show()"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-7---feature-engineering-1-cr.",
    "href": "hw-02-manasppanse.html#task-7---feature-engineering-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 7 - Feature Engineering (1 Cr.)",
    "text": "Task 7 - Feature Engineering (1 Cr.)\n\nsongs_df['valence_tempo_ratio'] = songs_df['valence'] / songs_df['tempo']\n\nprint(songs_df[['track_name', 'valence', 'tempo', 'valence_tempo_ratio']].head())\n\n               track_name  valence    tempo  valence_tempo_ratio\n0              Tim McGraw    0.425   76.009             0.005591\n1         Picture To Burn    0.821  105.586             0.007776\n2  Teardrops On My Guitar    0.289   99.953             0.002891\n3   A Place In This World    0.428  115.028             0.003721\n4             Cold As You    0.261  175.558             0.001487"
  },
  {
    "objectID": "hw-02-manasppanse.html#task-8---data-transformation-1-cr.",
    "href": "hw-02-manasppanse.html#task-8---data-transformation-1-cr.",
    "title": "Exploratory Data Analysis & Data Pre-Processing",
    "section": "Task 8 - Data Transformation (1 Cr.)",
    "text": "Task 8 - Data Transformation (1 Cr.)\n\nZ - Score Normalization\n\n# Z-Score Normalization\nscaler = StandardScaler()\nsongs_df['tempo_zscore'] = scaler.fit_transform(songs_df[['tempo']])\n\n# Transformation Check\nsongs_df['tempo_zscore'].describe()\n\ncount    1.940000e+02\nmean    -5.951711e-16\nstd      1.002587e+00\nmin     -1.814453e+00\n25%     -8.194760e-01\n50%     -1.256008e-01\n75%      7.578285e-01\nmax      2.623566e+00\nName: tempo_zscore, dtype: float64\n\n\n\n\nTransformation for Skewness\n\n# Density Plot\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['loudness'], shade = True)\nplt.title('Density Plot of Loudness Before Transformation')\nplt.show()\n\n# Q-Q Plot\nplt.figure(figsize = (8, 6))\nstats.probplot(songs_df['loudness'], dist = \"norm\", plot = plt)\nplt.title('Q-Q Plot of Loudness Before Transformation')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Applying Log Transformation to Correct Skewness\nsongs_df['loudness_log'] = np.log1p(songs_df['loudness'] - songs_df['loudness'].min() + 1)\n\n\n# Density Plot\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['loudness_log'], shade = True)\nplt.title('Density Plot of Loudness (After Log Transformation)')\nplt.show()\n\n# Q-Q Plot\nplt.figure(figsize = (8, 6))\nstats.probplot(songs_df['loudness_log'], dist = \"norm\", plot = plt)\nplt.title('Q-Q Plot of Loudness (After Log Transformation)')\nplt.show()"
  }
]