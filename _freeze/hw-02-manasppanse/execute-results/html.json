{
  "hash": "adb076b2ae7658914924dc05dcd25ece",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Exploratory Data Analysis & Data Pre-Processing\"\nauthor:\n  - name: \"Manas P Panse\"\n    affiliation: \"College of Information Science, University of Arizona\"\nformat:\n   html:\n    code-tools: true\n    code-overflow: wrap\n    embed-resources: true\ncode-annotations: hover\nexecute:\n  warning: false\n  messae: false\n  error: false\ntoc: true\n---\n\n# 0 - Pre-Checks\n\n::: {#python-version .cell execution_count=1}\n``` {.python .cell-code}\n# Checking Python Version\n\n!python --version\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython 3.12.3\n```\n:::\n:::\n\n\n::: {#import-libraries .cell execution_count=2}\n``` {.python .cell-code}\n# Importing Necessary Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nimport scipy.stats as stats\n```\n:::\n\n\n::: {#import-dataset .cell execution_count=3}\n``` {.python .cell-code}\n# Importing Dataset\n\nsongs_df = pd.read_csv(\"data/hw-02/taylor_album_songs.csv\")\n```\n:::\n\n\n# 1 - Exploratory Data Analysis\n\n## Task 1 - Data Overview (1 Cr.)\n\n::: {#data-overview .cell execution_count=4}\n``` {.python .cell-code}\nsongs_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 194 entries, 0 to 193\nData columns (total 29 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   album_name           194 non-null    object \n 1   ep                   194 non-null    bool   \n 2   album_release        194 non-null    object \n 3   track_number         194 non-null    int64  \n 4   track_name           194 non-null    object \n 5   artist               191 non-null    object \n 6   featuring            16 non-null     object \n 7   bonus_track          194 non-null    bool   \n 8   promotional_release  18 non-null     object \n 9   single_release       36 non-null     object \n 10  track_release        194 non-null    object \n 11  danceability         191 non-null    float64\n 12  energy               191 non-null    float64\n 13  key                  191 non-null    float64\n 14  loudness             191 non-null    float64\n 15  mode                 191 non-null    float64\n 16  speechiness          191 non-null    float64\n 17  acousticness         191 non-null    float64\n 18  instrumentalness     191 non-null    float64\n 19  liveness             191 non-null    float64\n 20  valence              191 non-null    float64\n 21  tempo                191 non-null    float64\n 22  time_signature       191 non-null    float64\n 23  duration_ms          191 non-null    float64\n 24  explicit             191 non-null    object \n 25  key_name             191 non-null    object \n 26  mode_name            191 non-null    object \n 27  key_mode             191 non-null    object \n 28  lyrics               0 non-null      float64\ndtypes: bool(2), float64(14), int64(1), object(12)\nmemory usage: 41.4+ KB\n```\n:::\n:::\n\n\n### Shape\n\nThe dataset contains **194** ROWS and **29** COLUMNS.\n\n### Columns\n\n1.  Categorical Columns : `album_name`, `ep`, `album_release`, `track_name`, `artist`, `featuring`, `bonus_track`, `promotional_release`, `single_release`, `track_release`, `explicit`, `key_name`, `mode_name`, `key_mode`.\n\n2.  Numerical Columns : `track_number`, `danceability`, `energy`, `key`, `loudness`, `mode`, `speechiness`, `acousticness`, `instrumentalness`, `liveness`, `valence`, `tempo`, `time_signature`, `duration_ms`, `lyrics`.\n\n### DataTypes\n\n1.  `object` : 12 columns.\n2.  `bool` : 02 columns.\n3.  `int64` : 01 column.\n4.  `float64` : 14 columns.\n\n### Descriptive Statistics\n\n::: {#cell-descriptive-statistics .cell execution_count=5}\n``` {.python .cell-code}\nsongs_df.describe()\n```\n\n::: {#descriptive-statistics .cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>track_number</th>\n      <th>danceability</th>\n      <th>energy</th>\n      <th>key</th>\n      <th>loudness</th>\n      <th>mode</th>\n      <th>speechiness</th>\n      <th>acousticness</th>\n      <th>instrumentalness</th>\n      <th>liveness</th>\n      <th>valence</th>\n      <th>tempo</th>\n      <th>time_signature</th>\n      <th>duration_ms</th>\n      <th>lyrics</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>194.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>191.000000</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>10.706186</td>\n      <td>0.584016</td>\n      <td>0.574492</td>\n      <td>4.685864</td>\n      <td>-7.518058</td>\n      <td>0.910995</td>\n      <td>0.058310</td>\n      <td>0.321225</td>\n      <td>0.003936</td>\n      <td>0.140813</td>\n      <td>0.400857</td>\n      <td>125.991424</td>\n      <td>3.979058</td>\n      <td>237078.942408</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6.599675</td>\n      <td>0.115372</td>\n      <td>0.183443</td>\n      <td>3.342826</td>\n      <td>2.775821</td>\n      <td>0.285500</td>\n      <td>0.056866</td>\n      <td>0.329021</td>\n      <td>0.030607</td>\n      <td>0.079951</td>\n      <td>0.190456</td>\n      <td>31.959403</td>\n      <td>0.289430</td>\n      <td>47316.125333</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.292000</td>\n      <td>0.131000</td>\n      <td>0.000000</td>\n      <td>-15.434000</td>\n      <td>0.000000</td>\n      <td>0.023100</td>\n      <td>0.000191</td>\n      <td>0.000000</td>\n      <td>0.035700</td>\n      <td>0.038200</td>\n      <td>68.534000</td>\n      <td>1.000000</td>\n      <td>148781.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5.000000</td>\n      <td>0.511000</td>\n      <td>0.446500</td>\n      <td>2.000000</td>\n      <td>-9.326000</td>\n      <td>1.000000</td>\n      <td>0.030800</td>\n      <td>0.034600</td>\n      <td>0.000000</td>\n      <td>0.092950</td>\n      <td>0.253500</td>\n      <td>99.978000</td>\n      <td>4.000000</td>\n      <td>209326.500000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>10.000000</td>\n      <td>0.594000</td>\n      <td>0.580000</td>\n      <td>5.000000</td>\n      <td>-6.937000</td>\n      <td>1.000000</td>\n      <td>0.039600</td>\n      <td>0.162000</td>\n      <td>0.000001</td>\n      <td>0.115000</td>\n      <td>0.404000</td>\n      <td>121.956000</td>\n      <td>4.000000</td>\n      <td>232107.000000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>15.000000</td>\n      <td>0.652000</td>\n      <td>0.717000</td>\n      <td>7.000000</td>\n      <td>-5.606000</td>\n      <td>1.000000</td>\n      <td>0.057400</td>\n      <td>0.662000</td>\n      <td>0.000040</td>\n      <td>0.150500</td>\n      <td>0.534500</td>\n      <td>150.027500</td>\n      <td>4.000000</td>\n      <td>254447.500000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>30.000000</td>\n      <td>0.897000</td>\n      <td>0.950000</td>\n      <td>11.000000</td>\n      <td>-2.098000</td>\n      <td>1.000000</td>\n      <td>0.519000</td>\n      <td>0.971000</td>\n      <td>0.348000</td>\n      <td>0.594000</td>\n      <td>0.942000</td>\n      <td>208.918000</td>\n      <td>5.000000</td>\n      <td>613027.000000</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Task 2 - Univariate Analysis (1 Cr.)\n\n::: {#column-separation .cell execution_count=6}\n``` {.python .cell-code}\n# Numerical Columns\nnumeric_cols = songs_df.select_dtypes(include=['float64', 'int64']).columns\n\n# Categorical Columns\ncategoric_cols = songs_df.select_dtypes(include=['object', 'bool']).columns\n```\n:::\n\n\n### Numeric Columns Plot\n\n::: {#cell-numeric-plot .cell execution_count=7}\n``` {.python .cell-code}\nplt.figure(figsize = (15, 12))\nfor i, column in enumerate(numeric_cols, 1):\n  plt.subplot(4, 4, i)\n  sns.histplot(songs_df[column], kde = True)\n  plt.title(f'Histogram of {column}')\n  plt.xlabel(column)\n  plt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/numeric-plot-output-1.png){#numeric-plot width=1430 height=1142}\n:::\n:::\n\n\n### Categoric Columns Plot\n\n::: {#cell-categoric-plot .cell execution_count=8}\n``` {.python .cell-code}\nplt.figure(figsize = (15, 12))\nfor i, column in enumerate(categoric_cols, 1):\n  plt.subplot(4, 4, i)\n  sns.histplot(songs_df[column], kde = True)\n  plt.title(f'Histogram of {column}')\n  plt.xlabel(column)\n  plt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/categoric-plot-output-1.png){#categoric-plot width=1432 height=1142}\n:::\n:::\n\n\n## Task 3 - Bivariate Analysis (1 Cr.)\n\n### Danceability vs Energy\n\n::: {#cell-dance-energy-plot .cell execution_count=9}\n``` {.python .cell-code}\nplt.figure(figsize = (8, 6))\nsns.scatterplot(x = \"danceability\", y = \"energy\", data = songs_df, hue = \"album_name\")\nplt.title(\"Danceability vs Energy\", pad = 50)\nplt.legend(title = \"Album\", loc = 'upper center', bbox_to_anchor = (0.5, 1.15), fontsize = \"small\", ncol = 5)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/dance-energy-plot-output-1.png){#dance-energy-plot width=729 height=566}\n:::\n:::\n\n\n### Loudness vs Acousticness\n\n::: {#cell-loud-acoustic-plot .cell execution_count=10}\n``` {.python .cell-code}\nplt.figure(figsize = (8, 6))\nsns.scatterplot(x = \"loudness\", y = \"acousticness\", data = songs_df, hue = \"album_name\")\nplt.title(\"Loudness vs Acousticness\", pad = 50)\nplt.legend(title = \"Album\", loc = 'upper center', bbox_to_anchor = (0.5, 1.15), fontsize = \"small\", ncol = 5)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/loud-acoustic-plot-output-1.png){#loud-acoustic-plot width=729 height=566}\n:::\n:::\n\n\n### Valence vs Tempo\n\n::: {#cell-valence-tempo-plot .cell execution_count=11}\n``` {.python .cell-code}\nplt.figure(figsize = (8, 6))\nsns.scatterplot(x = \"valence\", y = \"tempo\", data = songs_df, hue = \"album_name\")\nplt.title(\"Valence vs Tempo\", pad = 50)\nplt.legend(title = \"Album\", loc = 'upper center', bbox_to_anchor = (0.5, 1.15), fontsize = \"small\", ncol = 5)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/valence-tempo-plot-output-1.png){#valence-tempo-plot width=732 height=566}\n:::\n:::\n\n\n## Task 4 - Missing Data & Outliers (1 Cr.)\n\n### Null Values\n\n::: {#cell-finding-null-values .cell execution_count=12}\n``` {.python .cell-code}\nsongs_df.isnull().sum()\n```\n\n::: {#finding-null-values .cell-output .cell-output-display execution_count=12}\n```\nalbum_name               0\nep                       0\nalbum_release            0\ntrack_number             0\ntrack_name               0\nartist                   3\nfeaturing              178\nbonus_track              0\npromotional_release    176\nsingle_release         158\ntrack_release            0\ndanceability             3\nenergy                   3\nkey                      3\nloudness                 3\nmode                     3\nspeechiness              3\nacousticness             3\ninstrumentalness         3\nliveness                 3\nvalence                  3\ntempo                    3\ntime_signature           3\nduration_ms              3\nexplicit                 3\nkey_name                 3\nmode_name                3\nkey_mode                 3\nlyrics                 194\ndtype: int64\n```\n:::\n:::\n\n\nColumns with NULLs : `artist`, `featuring`, `promotional_release`, `single_release`, `danceability`, `energy`, `key`, `loudness`, `mode`, `speechiness`, `acousticness`, `instrumentalness`, `liveness`, `valence`, `tempo`, `time_signature`, `duration_ms`, `lyrics`.\n\n### Outlier Detection\n\n::: {#outliers-iqr .cell execution_count=13}\n``` {.python .cell-code}\ndef find_outliers(df, column):\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    return df[(df[column] < lower_bound) | (df[column] > upper_bound)]\n\noutliers_count = {col: len(find_outliers(songs_df, col)) for col in numeric_cols}\nprint(\"Total Outliers for each Numerical Column :\\n\", outliers_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal Outliers for each Numerical Column :\n {'track_number': 0, 'danceability': 3, 'energy': 0, 'key': 0, 'loudness': 2, 'mode': 17, 'speechiness': 20, 'acousticness': 0, 'instrumentalness': 40, 'liveness': 21, 'valence': 0, 'tempo': 0, 'time_signature': 8, 'duration_ms': 5, 'lyrics': 0}\n```\n:::\n:::\n\n\n# 2 - Data Pre-Processing\n\n## Task 5 - Handling Missing Values (1 Cr.)\n\n::: {#median-numeric-cols .cell execution_count=14}\n``` {.python .cell-code}\nfor col in numeric_cols:\n    songs_df[col].fillna(songs_df[col].median(), inplace = True)\n```\n:::\n\n\n::: {#mode-categoric-cols .cell execution_count=15}\n``` {.python .cell-code}\nfor col in categoric_cols:\n    songs_df[col].fillna(songs_df[col].mode().iloc[0], inplace = True)\n```\n:::\n\n\n::: {#cell-imputation-check .cell execution_count=16}\n``` {.python .cell-code}\nsongs_df.isnull().sum()\n```\n\n::: {#imputation-check .cell-output .cell-output-display execution_count=16}\n```\nalbum_name               0\nep                       0\nalbum_release            0\ntrack_number             0\ntrack_name               0\nartist                   0\nfeaturing                0\nbonus_track              0\npromotional_release      0\nsingle_release           0\ntrack_release            0\ndanceability             0\nenergy                   0\nkey                      0\nloudness                 0\nmode                     0\nspeechiness              0\nacousticness             0\ninstrumentalness         0\nliveness                 0\nvalence                  0\ntempo                    0\ntime_signature           0\nduration_ms              0\nexplicit                 0\nkey_name                 0\nmode_name                0\nkey_mode                 0\nlyrics                 194\ndtype: int64\n```\n:::\n:::\n\n\n## Task 6 - Dealing with Outliers (1 Cr.)\n\n::: {#cell-pre-capping .cell execution_count=17}\n``` {.python .cell-code}\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['danceability'], shade = True)\nplt.title('Density Plot of Danceability Before Capping')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/pre-capping-output-1.png){#pre-capping width=663 height=523}\n:::\n:::\n\n\n::: {#cell-capping-plot .cell execution_count=18}\n``` {.python .cell-code}\ntask6_lb = songs_df['danceability'].quantile(0.10) # Cutoff at 10th\ntask6_ub = songs_df['danceability'].quantile(0.90) # Cutoff at 90th\n\nsongs_df['danceability'] = songs_df['danceability'].clip(lower = task6_lb, upper = task6_ub)\n\n# Visualizing the Effect of Capping\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['danceability'], shade = True)\nplt.title('Density Plot of Danceability After Capping')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/capping-plot-output-1.png){#capping-plot width=663 height=523}\n:::\n:::\n\n\n## Task 7 - Feature Engineering (1 Cr.)\n\n::: {#new-feature .cell execution_count=19}\n``` {.python .cell-code}\nsongs_df['valence_tempo_ratio'] = songs_df['valence'] / songs_df['tempo']\n\nprint(songs_df[['track_name', 'valence', 'tempo', 'valence_tempo_ratio']].head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               track_name  valence    tempo  valence_tempo_ratio\n0              Tim McGraw    0.425   76.009             0.005591\n1         Picture To Burn    0.821  105.586             0.007776\n2  Teardrops On My Guitar    0.289   99.953             0.002891\n3   A Place In This World    0.428  115.028             0.003721\n4             Cold As You    0.261  175.558             0.001487\n```\n:::\n:::\n\n\n## Task 8 - Data Transformation (1 Cr.)\n\n### Z - Score Normalization\n\n::: {#cell-zscore-norm .cell execution_count=20}\n``` {.python .cell-code}\n# Z-Score Normalization\nscaler = StandardScaler()\nsongs_df['tempo_zscore'] = scaler.fit_transform(songs_df[['tempo']])\n\n# Transformation Check\nsongs_df['tempo_zscore'].describe()\n```\n\n::: {#zscore-norm .cell-output .cell-output-display execution_count=20}\n```\ncount    1.940000e+02\nmean    -5.951711e-16\nstd      1.002587e+00\nmin     -1.814453e+00\n25%     -8.194760e-01\n50%     -1.256008e-01\n75%      7.578285e-01\nmax      2.623566e+00\nName: tempo_zscore, dtype: float64\n```\n:::\n:::\n\n\n### Transformation for Skewness\n\n::: {#density-qq-before-plots .cell execution_count=21}\n``` {.python .cell-code}\n# Density Plot\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['loudness'], shade = True)\nplt.title('Density Plot of Loudness Before Transformation')\nplt.show()\n\n# Q-Q Plot\nplt.figure(figsize = (8, 6))\nstats.probplot(songs_df['loudness'], dist = \"norm\", plot = plt)\nplt.title('Q-Q Plot of Loudness Before Transformation')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/density-qq-before-plots-output-1.png){#density-qq-before-plots-1 width=672 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/density-qq-before-plots-output-2.png){#density-qq-before-plots-2 width=670 height=523}\n:::\n:::\n\n\n::: {#log-transform .cell execution_count=22}\n``` {.python .cell-code}\n# Applying Log Transformation to Correct Skewness\nsongs_df['loudness_log'] = np.log1p(songs_df['loudness'] - songs_df['loudness'].min() + 1)\n```\n:::\n\n\n::: {#density-qq-after-plots .cell execution_count=23}\n``` {.python .cell-code}\n# Density Plot\nplt.figure(figsize = (8, 6))\nsns.kdeplot(songs_df['loudness_log'], shade = True)\nplt.title('Density Plot of Loudness (After Log Transformation)')\nplt.show()\n\n# Q-Q Plot\nplt.figure(figsize = (8, 6))\nstats.probplot(songs_df['loudness_log'], dist = \"norm\", plot = plt)\nplt.title('Q-Q Plot of Loudness (After Log Transformation)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/density-qq-after-plots-output-1.png){#density-qq-after-plots-1 width=663 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](hw-02-manasppanse_files/figure-html/density-qq-after-plots-output-2.png){#density-qq-after-plots-2 width=663 height=523}\n:::\n:::\n\n\n# 3 - Declaration of Independent Work\n\nSee **HOMEPAGE** for details\n\n",
    "supporting": [
      "hw-02-manasppanse_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}