{
  "hash": "8b1040d7af54a682f763bdfd256948f8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Clustering Techniques\"\nauthor:\n  - name: \"Manas P Panse\"\n    affiliation: \"College of Information Science, University of Arizona\"\nformat:\n   html:\n    code-tools: true\n    code-overflow: wrap\n    embed-resources: true\ncode-annotations: hover\nexecute:\n  warning: false\n  messae: false\n  error: false\ntoc: true\n---\n\n# 0 - Pre-Checks\n\n::: {#python-version .cell execution_count=1}\n``` {.python .cell-code}\n# Checking Python Version\n\n!python --version\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython 3.12.3\n```\n:::\n:::\n\n\n::: {#import-libraries .cell execution_count=2}\n``` {.python .cell-code}\n# Importing Necessary Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom scipy.stats import zscore\nfrom sklearn.cluster import KMeans\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import calinski_harabasz_score\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import StandardScaler\n\n# Setting Plot Style\nsns.set(style = \"white\")\n```\n:::\n\n\n::: {#import-dataset .cell execution_count=3}\n``` {.python .cell-code}\n# Importing Dataset\nenergy_df = pd.read_csv(\"data/hw-05/owid-energy.csv\")\n```\n:::\n\n\n# 1 - Data Preparation\n\n### Data Overview\n\n::: {#cell-df-head .cell execution_count=4}\n``` {.python .cell-code}\nenergy_df.head()\n```\n\n::: {#df-head .cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>year</th>\n      <th>iso_code</th>\n      <th>population</th>\n      <th>gdp</th>\n      <th>biofuel_cons_change_pct</th>\n      <th>biofuel_cons_change_twh</th>\n      <th>biofuel_cons_per_capita</th>\n      <th>biofuel_consumption</th>\n      <th>biofuel_elec_per_capita</th>\n      <th>...</th>\n      <th>solar_share_elec</th>\n      <th>solar_share_energy</th>\n      <th>wind_cons_change_pct</th>\n      <th>wind_cons_change_twh</th>\n      <th>wind_consumption</th>\n      <th>wind_elec_per_capita</th>\n      <th>wind_electricity</th>\n      <th>wind_energy_per_capita</th>\n      <th>wind_share_elec</th>\n      <th>wind_share_energy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Afghanistan</td>\n      <td>1900</td>\n      <td>AFG</td>\n      <td>4832414.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Afghanistan</td>\n      <td>1901</td>\n      <td>AFG</td>\n      <td>4879685.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Afghanistan</td>\n      <td>1902</td>\n      <td>AFG</td>\n      <td>4935122.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Afghanistan</td>\n      <td>1903</td>\n      <td>AFG</td>\n      <td>4998861.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Afghanistan</td>\n      <td>1904</td>\n      <td>AFG</td>\n      <td>5063419.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 129 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#eda .cell execution_count=5}\n``` {.python .cell-code}\nenergy_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 21890 entries, 0 to 21889\nColumns: 129 entries, country to wind_share_energy\ndtypes: float64(126), int64(1), object(2)\nmemory usage: 21.5+ MB\n```\n:::\n:::\n\n\n#### Shape\n\nThe dataset contains **21890** ROWS and **129** COLUMNS.\n\n#### DataTypes\n\n1.  `int64` : 01 column.\n2.  `object` : 02 columns.\n3.  `float64` : 126 columns.\n\n### Descriptive Statistics\n\n::: {#cell-eda-desc-stats .cell execution_count=6}\n``` {.python .cell-code}\nenergy_df.describe()\n```\n\n::: {#eda-desc-stats .cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>population</th>\n      <th>gdp</th>\n      <th>biofuel_cons_change_pct</th>\n      <th>biofuel_cons_change_twh</th>\n      <th>biofuel_cons_per_capita</th>\n      <th>biofuel_consumption</th>\n      <th>biofuel_elec_per_capita</th>\n      <th>biofuel_electricity</th>\n      <th>biofuel_share_elec</th>\n      <th>...</th>\n      <th>solar_share_elec</th>\n      <th>solar_share_energy</th>\n      <th>wind_cons_change_pct</th>\n      <th>wind_cons_change_twh</th>\n      <th>wind_consumption</th>\n      <th>wind_elec_per_capita</th>\n      <th>wind_electricity</th>\n      <th>wind_energy_per_capita</th>\n      <th>wind_share_elec</th>\n      <th>wind_share_energy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>21890.000000</td>\n      <td>1.802900e+04</td>\n      <td>1.111300e+04</td>\n      <td>862.000000</td>\n      <td>1337.000000</td>\n      <td>952.000000</td>\n      <td>1372.000000</td>\n      <td>5221.000000</td>\n      <td>5442.000000</td>\n      <td>5407.000000</td>\n      <td>...</td>\n      <td>6871.000000</td>\n      <td>5442.000000</td>\n      <td>2295.000000</td>\n      <td>5340.000000</td>\n      <td>5445.000000</td>\n      <td>7789.000000</td>\n      <td>8676.000000</td>\n      <td>4779.000000</td>\n      <td>6871.000000</td>\n      <td>5445.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1973.661261</td>\n      <td>1.045117e+08</td>\n      <td>3.585114e+11</td>\n      <td>34.143052</td>\n      <td>3.449835</td>\n      <td>159.620382</td>\n      <td>47.051201</td>\n      <td>65.366646</td>\n      <td>11.032376</td>\n      <td>2.030252</td>\n      <td>...</td>\n      <td>0.580494</td>\n      <td>0.129717</td>\n      <td>274.509119</td>\n      <td>5.647746</td>\n      <td>40.340626</td>\n      <td>54.478592</td>\n      <td>14.571141</td>\n      <td>175.599518</td>\n      <td>1.358409</td>\n      <td>0.440739</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>34.960962</td>\n      <td>4.593929e+08</td>\n      <td>2.411179e+12</td>\n      <td>227.488193</td>\n      <td>11.674255</td>\n      <td>269.540042</td>\n      <td>125.445899</td>\n      <td>202.092082</td>\n      <td>46.728412</td>\n      <td>5.391375</td>\n      <td>...</td>\n      <td>2.009426</td>\n      <td>0.475138</td>\n      <td>6084.992396</td>\n      <td>31.723429</td>\n      <td>224.719509</td>\n      <td>236.096397</td>\n      <td>86.388161</td>\n      <td>623.300059</td>\n      <td>4.443910</td>\n      <td>1.533429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1900.000000</td>\n      <td>1.833000e+03</td>\n      <td>1.642060e+08</td>\n      <td>-100.000000</td>\n      <td>-54.584000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>-100.000000</td>\n      <td>-42.829000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1945.000000</td>\n      <td>1.691561e+06</td>\n      <td>1.365898e+10</td>\n      <td>0.013250</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.665000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1984.000000</td>\n      <td>6.968070e+06</td>\n      <td>4.167411e+10</td>\n      <td>8.251000</td>\n      <td>0.005000</td>\n      <td>18.697000</td>\n      <td>2.704500</td>\n      <td>0.137000</td>\n      <td>0.010000</td>\n      <td>0.067000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>20.944000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2003.000000</td>\n      <td>2.538869e+07</td>\n      <td>1.744295e+11</td>\n      <td>25.328000</td>\n      <td>2.153000</td>\n      <td>238.256000</td>\n      <td>25.975500</td>\n      <td>36.301000</td>\n      <td>0.740000</td>\n      <td>1.610000</td>\n      <td>...</td>\n      <td>0.062000</td>\n      <td>0.004000</td>\n      <td>50.000000</td>\n      <td>0.105250</td>\n      <td>0.774000</td>\n      <td>0.715000</td>\n      <td>0.059000</td>\n      <td>13.208500</td>\n      <td>0.325500</td>\n      <td>0.053000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2022.000000</td>\n      <td>7.909295e+09</td>\n      <td>1.136302e+14</td>\n      <td>5659.328000</td>\n      <td>136.261000</td>\n      <td>1747.467000</td>\n      <td>1139.921000</td>\n      <td>2524.931000</td>\n      <td>666.280000</td>\n      <td>71.429000</td>\n      <td>...</td>\n      <td>40.000000</td>\n      <td>5.999000</td>\n      <td>242384.844000</td>\n      <td>679.413000</td>\n      <td>4872.095000</td>\n      <td>3219.852000</td>\n      <td>1848.260000</td>\n      <td>7361.917000</td>\n      <td>56.840000</td>\n      <td>24.614000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows Ã— 127 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Handling Missing Values\n\n::: {#cell-pre-check-missing-values .cell execution_count=7}\n``` {.python .cell-code}\nenergy_df.isnull().sum()\n```\n\n::: {#pre-check-missing-values .cell-output .cell-output-display execution_count=35}\n```\ncountry                       0\nyear                          0\niso_code                   5470\npopulation                 3861\ngdp                       10777\n                          ...  \nwind_elec_per_capita      14101\nwind_electricity          13214\nwind_energy_per_capita    17111\nwind_share_elec           15019\nwind_share_energy         16445\nLength: 129, dtype: int64\n```\n:::\n:::\n\n\n### Handling duplicate Values\n\n::: {#cell-pre-check-duplicate-values .cell execution_count=8}\n``` {.python .cell-code}\nenergy_df.duplicated().sum()\n```\n\n::: {#pre-check-duplicate-values .cell-output .cell-output-display execution_count=36}\n```\n0\n```\n:::\n:::\n\n\n### Column Separations for Future Use\n\n::: {#eda-column-separate .cell execution_count=9}\n``` {.python .cell-code}\n# Numerical Columns\nnumeric_cols = energy_df.select_dtypes(include = ['int64', 'float64']).columns\n\n# Categorical Columns\ncategoric_cols = energy_df.select_dtypes(include = ['object', 'bool']).columns\n```\n:::\n\n\n### Given Code\n\n::: {#pre1-given-code .cell execution_count=10}\n``` {.python .cell-code}\n# Selecting a subset of columns that are most relevant to Energy Consumption, Production, and Environmental Impact\nrelevant_columns = [\n    'country', 'year', 'iso_code', 'population', 'gdp',\n    'biofuel_consumption', 'coal_consumption', 'gas_consumption', 'oil_consumption',\n    'renewables_consumption', 'nuclear_consumption', 'fossil_fuel_consumption', 'low_carbon_consumption',\n    'electricity_generation', 'primary_energy_consumption', 'carbon_intensity_elec',\n    'greenhouse_gas_emissions'\n]\n\n# Creating a new DataFrame with the Relevant Columns\nrelevant_df = energy_df[relevant_columns]\n\n# For simplicity, we will fill missing values in consumption and generation columns with zeros, as missing values can logically imply no consumption/production\nconsumption_generation_columns = [\n    'biofuel_consumption', 'coal_consumption', 'gas_consumption', 'oil_consumption',\n    'renewables_consumption', 'nuclear_consumption', 'fossil_fuel_consumption', 'low_carbon_consumption',\n    'electricity_generation', 'primary_energy_consumption'\n]\nrelevant_df.loc[:, consumption_generation_columns] = relevant_df[consumption_generation_columns].fillna(0)\n\n# Checking if there are any object types that should be converted or other data type corrections\n# Summary of the Cleaned DataFrame\nrelevant_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 21890 entries, 0 to 21889\nData columns (total 17 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   country                     21890 non-null  object \n 1   year                        21890 non-null  int64  \n 2   iso_code                    16420 non-null  object \n 3   population                  18029 non-null  float64\n 4   gdp                         11113 non-null  float64\n 5   biofuel_consumption         21890 non-null  float64\n 6   coal_consumption            21890 non-null  float64\n 7   gas_consumption             21890 non-null  float64\n 8   oil_consumption             21890 non-null  float64\n 9   renewables_consumption      21890 non-null  float64\n 10  nuclear_consumption         21890 non-null  float64\n 11  fossil_fuel_consumption     21890 non-null  float64\n 12  low_carbon_consumption      21890 non-null  float64\n 13  electricity_generation      21890 non-null  float64\n 14  primary_energy_consumption  21890 non-null  float64\n 15  carbon_intensity_elec       5079 non-null   float64\n 16  greenhouse_gas_emissions    5220 non-null   float64\ndtypes: float64(14), int64(1), object(2)\nmemory usage: 2.8+ MB\n```\n:::\n:::\n\n\n## Task 1 - Exploratory Data Analysis (2 Cr.)\n\n### Distribution of `primary_energy_consumption`.\n\n::: {#energyconsumption-missing-zero-value .cell execution_count=11}\n``` {.python .cell-code}\n# Checking Missing & Zero Values.\nprint(\"Missing Values :\", relevant_df['primary_energy_consumption'].isnull().sum())\nprint(\"Zero Values :\", (relevant_df['primary_energy_consumption'] == 0).sum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMissing Values : 0\nZero Values : 9894\n```\n:::\n:::\n\n\n::: {#energyconsumption-filter-zero .cell execution_count=12}\n``` {.python .cell-code}\n# Filtering out Zeros for meaningful visualization\nfiltered_data = relevant_df['primary_energy_consumption'][relevant_df['primary_energy_consumption'] > 0]\n```\n:::\n\n\n::: {#cell-energyconsumption-hist-plot .cell execution_count=13}\n``` {.python .cell-code}\n# Plotting\nplt.figure(figsize = (8, 6))\nsns.histplot(filtered_data, kde = True, color = \"tomato\")\nplt.title(\"Distribution of Primary Energy Consumption (Non-Zero Values)\")\nplt.xlabel(\"Primary Energy Consumption\")\nplt.ylabel(\"Frequency\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/energyconsumption-hist-plot-output-1.png){#energyconsumption-hist-plot width=680 height=529}\n:::\n:::\n\n\nYou know I don't mean to sound unprofessional, but above plot looks absolutely hideous. Let's fix that ...\n\n::: {#cell-energyconsumption-log-hist-plot .cell execution_count=14}\n``` {.python .cell-code}\n# Applying Log Transformation excluding Zero Values\nlog_consumption = np.log(filtered_data)\n\n# Plotting Log-Transformed Values\nplt.figure(figsize = (8, 6))\nsns.histplot(log_consumption, kde = True, color = \"tomato\")\nplt.title(\"Log-Transformed Distribution of Primary Energy Consumption (Non-Zero Values)\")\nplt.xlabel(\"Log of Primary Energy Consumption\")\nplt.ylabel(\"Frequency\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/energyconsumption-log-hist-plot-output-1.png){#energyconsumption-log-hist-plot width=675 height=529}\n:::\n:::\n\n\n### Distribution of `electricity_generation`\n\n::: {#elecgen-missing-zero-value .cell execution_count=15}\n``` {.python .cell-code}\n# Checking for Missing and Zero Values\nprint(\"Missing Values :\", relevant_df['electricity_generation'].isnull().sum())\nprint(\"Zero Values :\", (relevant_df['electricity_generation'] == 0).sum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMissing Values : 0\nZero Values : 14964\n```\n:::\n:::\n\n\n::: {#elecgen-filter-zero .cell execution_count=16}\n``` {.python .cell-code}\n# Filtering out Zero for meaningful visualization\nfiltered_electricity_gen = relevant_df['electricity_generation'][relevant_df['electricity_generation'] > 0]\n```\n:::\n\n\n::: {#cell-elecgen-hist-plot .cell execution_count=17}\n``` {.python .cell-code}\n# Plotting\nplt.figure(figsize = (8, 6))\nsns.histplot(filtered_electricity_gen, kde = True, color = \"orange\")\nplt.title(\"Distribution of Electricity Generation (Non-Zero Values)\")\nplt.xlabel(\"Electricity Generation\")\nplt.ylabel(\"Frequency\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/elecgen-hist-plot-output-1.png){#elecgen-hist-plot width=680 height=529}\n:::\n:::\n\n\nAnd again, the hideous-ness continues here ... let's fix that too !\n\n::: {#cell-elecgen-log-hist-plot .cell execution_count=18}\n``` {.python .cell-code}\n# Applying Log Transformation excluding Zero Values\nlog_electricity_gen = np.log(filtered_electricity_gen)\n\n# Plotting Log Transformed Values\nplt.figure(figsize = (8, 6))\nsns.histplot(log_electricity_gen, kde = True, color = \"orange\")\nplt.title(\"Log-Transformed Distribution of Electricity Generation (Non-Zero Values)\")\nplt.xlabel(\"Log of Electricity Generation\")\nplt.ylabel(\"Frequency\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/elecgen-log-hist-plot-output-1.png){#elecgen-log-hist-plot width=672 height=529}\n:::\n:::\n\n\n### Distribution of `carbon_intensity_elec`\n\n::: {#carbonintense-missing-zero-values .cell execution_count=19}\n``` {.python .cell-code}\n# Checking Missing Values\nprint(\"Missing Values :\", relevant_df['carbon_intensity_elec'].isnull().sum())\nprint(\"Zero Values :\", (relevant_df['carbon_intensity_elec'] == 0).sum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMissing Values : 16811\nZero Values : 24\n```\n:::\n:::\n\n\n::: {#carbonintense-filter .cell execution_count=20}\n``` {.python .cell-code}\n# Filtering Missing & Zero Values\nfiltered_carbon_intensity = relevant_df['carbon_intensity_elec'][(relevant_df['carbon_intensity_elec'] > 0)]\n```\n:::\n\n\n::: {#cell-carbonintense-hist-plot .cell execution_count=21}\n``` {.python .cell-code}\n# Plotting\nplt.figure(figsize = (8, 6))\nsns.histplot(filtered_carbon_intensity, kde = True, color = \"slategray\")\nplt.title(\"Distribution of Carbon Intensity of Electricity\")\nplt.xlabel(\"Carbon Intensity of Electricity\")\nplt.ylabel(\"Frequency\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/carbonintense-hist-plot-output-1.png){#carbonintense-hist-plot width=672 height=529}\n:::\n:::\n\n\n### Coorelation Matrix\n\n::: {#cell-correlation-matrix .cell execution_count=22}\n``` {.python .cell-code}\n# Identifying columns that are in both numeric_cols and relevant_df\nnumeric_cols_in_relevant_df = [col for col in numeric_cols if col in relevant_df.columns]\ncorrelation_matrix = relevant_df[numeric_cols_in_relevant_df].corr()\n\n# Plotting\nplt.figure(figsize = (8, 6))\nsns.heatmap(correlation_matrix, annot = False, cmap = \"coolwarm\", center = 0, square = True, linewidths = 0.5)\nplt.title(\"Correlation Matrix of Numerical Features\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/correlation-matrix-output-1.png){#correlation-matrix width=754 height=689}\n:::\n:::\n\n\n#### Observations from the Heatmap\n\n1.  There are strong correlations among different types of energy consumption and production metrics, as expected. For example, fossil fuel consumption is highly correlated with total primary energy consumption and electricity generation.\n\n2.  Renewable energy consumption shows a positive correlation with low carbon consumption and electricity generation, indicating that countries with higher renewable energy use also tend to have higher overall low carbon energy usage.\n\n3.  Carbon intensity of electricity has correlations with several types of energy consumption, which could inform clustering decisions based on environmental impact considerations.\n\n# 2 - CLustering Methods Implementation and Analysis\n\n## Task 2 - Feature Selection and Data Preparation (2 Cr.)\n\n::: {#feature-selection .cell execution_count=23}\n``` {.python .cell-code}\n# Step 1: Feature Selection - Focus on a mix of Consumption, Production, and Environmental Impact\nfeatures_for_clustering = [\n    'biofuel_consumption', 'coal_consumption', 'gas_consumption', 'oil_consumption',\n    'renewables_consumption', 'nuclear_consumption', 'fossil_fuel_consumption',\n    'low_carbon_consumption', 'electricity_generation', 'primary_energy_consumption',\n    'carbon_intensity_elec'\n]\n```\n:::\n\n\n::: {#editing-carbon-intensity .cell execution_count=24}\n``` {.python .cell-code}\nclustering_df = energy_df[features_for_clustering]\nclustering_df = clustering_df.dropna(subset = ['carbon_intensity_elec'])\n\n# Imputing Missing Values in remaining columns using Mean Strategy\nimputer = SimpleImputer(strategy = 'mean')\nclustering_df_imputed = pd.DataFrame(imputer.fit_transform(clustering_df), columns = clustering_df.columns)\n```\n:::\n\n\n::: {#cell-zscale-norm .cell execution_count=25}\n``` {.python .cell-code}\n# Performing Z-Scale Normalization\nscaler = StandardScaler()\nscaled_clustering_df = pd.DataFrame(\n    scaler.fit_transform(clustering_df_imputed), columns = clustering_df_imputed.columns\n)\n\n# Checking to see if Data is Ready for Clustering\nscaled_clustering_df.isnull().sum()\n```\n\n::: {#zscale-norm .cell-output .cell-output-display execution_count=53}\n```\nbiofuel_consumption           0\ncoal_consumption              0\ngas_consumption               0\noil_consumption               0\nrenewables_consumption        0\nnuclear_consumption           0\nfossil_fuel_consumption       0\nlow_carbon_consumption        0\nelectricity_generation        0\nprimary_energy_consumption    0\ncarbon_intensity_elec         0\ndtype: int64\n```\n:::\n:::\n\n\n## Task 3 - KMeans Clustering (4 Cr.)\n\n::: {#cell-kmeans-elbow .cell execution_count=26}\n``` {.python .cell-code}\n# Within-Cluster Sum of Squares\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(scaled_clustering_df)\n    wcss.append(kmeans.inertia_)\n\n# Ploting the Elbow Graph\nplt.figure(figsize = (8, 6))\nplt.plot(range(1, 11), wcss, marker = 'o', linestyle = '--')\nplt.title('Elbow Method for Optimal K')\nplt.xlabel('Number of Clusters')\nplt.ylabel('WCSS')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/kmeans-elbow-output-1.png){#kmeans-elbow width=688 height=529}\n:::\n:::\n\n\n::: {#cell-kmeans-cluster .cell execution_count=27}\n``` {.python .cell-code}\n# Applying K-Means with Cluster Count 3\noptimal_k = 3 \nkmeans = KMeans(n_clusters = optimal_k, init = 'k-means++', random_state = 42)\nclustering_df_imputed['Cluster'] = kmeans.fit_predict(scaled_clustering_df)\n\n# Plotting the Cluster\nsns.pairplot(clustering_df_imputed, hue = 'Cluster', palette = 'rainbow', corner = True)\nplt.suptitle('KMeans Clustering Results', fontsize = 25)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/kmeans-cluster-output-1.png){#kmeans-cluster width=2679 height=2590}\n:::\n:::\n\n\n## Task 4 - Hierarchical Clustering (2 Cr.)\n\n::: {#cell-task-4-hierarchical .cell execution_count=28}\n``` {.python .cell-code}\n# Performing Hierarchical Clustering\nlinked = linkage(scaled_clustering_df, method = 'ward')\n\n# Plotting a Dendrogram for Cluster Heirarchy\nplt.figure(figsize = (8, 6))\ndendrogram(linked, labels=clustering_df_imputed.index, leaf_rotation = 90, leaf_font_size = 10, no_labels = True)\nplt.title('Dendrogram for Hierarchical Clustering')\nplt.xlabel('Samples')\nplt.ylabel('Euclidean Distances')\nplt.xticks([])\nplt.figtext(0.5, -0.05, 'NOTE: The sample ticks were removed to optimize performace and reduce clutter on screen.', wrap = True, horizontalalignment = 'center', fontsize = 5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw-05-manasppanse_files/figure-html/task-4-hierarchical-output-1.png){#task-4-hierarchical width=671 height=576}\n:::\n:::\n\n\n# 3 - Declaration of Independent Work\n\nSee **HOMEPAGE** for details\n\n",
    "supporting": [
      "hw-05-manasppanse_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}